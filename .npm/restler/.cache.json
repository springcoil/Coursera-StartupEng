{"_id":"restler","_rev":"39-6a556d42e4a5060549e8f6ccae40d0b6","name":"restler","description":"An HTTP client library for node.js","dist-tags":{"latest":"3.2.0"},"versions":{"0.2.0":{"name":"restler","version":"0.2.0","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib","bin":"./bin"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_id":"restler@0.2.0","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8-pre","bin":{"restler":"bin/restler"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"fbd5e40322aac981c5a3875132297cadc607bc69","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.0.tgz"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"0.2.1":{"name":"restler","version":"0.2.1","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_id":"restler@0.2.1","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","dist":{"shasum":"be7d9fe84e44464d4e85c45b4d03cf8a65d6e7b4","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.1.tgz"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"0.2.2":{"name":"restler","version":"0.2.2","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"_id":"restler@0.2.2","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"a102735b65f4b92ebdffda4021fa338eb516b8f9","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.2.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"0.2.3":{"name":"restler","version":"0.2.3","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"_id":"restler@0.2.3","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"62357fa8c77453f8d14307b5b23ff77dff502cbf","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.3.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"0.2.4":{"name":"restler","version":"0.2.4","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"_id":"restler@0.2.4","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"91db1b313ba301baa752a9deea3b55c4ad1f0eac","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.4.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"0.2.5":{"name":"restler","version":"0.2.5","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.3.7"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"_id":"restler@0.2.5","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"6e2cc3f985a38c529e010dc9a103ea477e0a24f7","tarball":"http://registry.npmjs.org/restler/-/restler-0.2.5.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"2.0.0":{"name":"restler","version":"2.0.0","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.6.x"},"dependencies":{},"devDependencies":{"nodeunit":">=0.5.0","xml2js":">=0.1.0","yaml":">=0.2.0","iconv":">=1.0.0"},"_npmUser":{"name":"ayoung","email":"andrewdyoung@gmail.com"},"_id":"restler@2.0.0","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"9a40b1f03672aa814a75cdcad0903510a6d0f428","tarball":"http://registry.npmjs.org/restler/-/restler-2.0.0.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"2.0.1":{"name":"restler","version":"2.0.1","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"}],"homepage":"https://github.com/danwrong/restler","directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.6.x"},"dependencies":{},"devDependencies":{"nodeunit":">=0.5.0","xml2js":">=0.1.0","yaml":">=0.2.0","iconv":">=1.0.0"},"_npmUser":{"name":"danwrong","email":"dan@danwebb.net"},"_id":"restler@2.0.1","_engineSupported":false,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"593e3d4fac6b93faffa1c5ed0ca97fa3422078c8","tarball":"http://registry.npmjs.org/restler/-/restler-2.0.1.tgz"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"}]},"3.0.0":{"name":"restler","version":"3.0.0","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"},{"name":"Ben Marvell","email":"ben@marvell-consulting.com"}],"homepage":"https://github.com/danwrong/restler","repository":{"type":"git","url":"https://github.com/danwrong/restler.git"},"directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.10.x"},"scripts":{"test":"node test/all.js"},"dependencies":{"qs":"0.6.6","xml2js":"0.4.0","yaml":"0.2.3","iconv":"2.0.7"},"devDependencies":{"nodeunit":"0.8.2"},"bugs":{"url":"https://github.com/danwrong/restler/issues"},"_id":"restler@3.0.0","dist":{"shasum":"425ca9f88b7e5d0325b1f56df171a128a1d0b11d","tarball":"http://registry.npmjs.org/restler/-/restler-3.0.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"easternbloc","email":"ben@marvell-consulting.com"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"},{"name":"easternbloc","email":"ben@marvell-consulting.com"}]},"3.1.0":{"name":"restler","version":"3.1.0","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"},{"name":"Ben Marvell","email":"ben@marvell-consulting.com"}],"homepage":"https://github.com/danwrong/restler","repository":{"type":"git","url":"https://github.com/danwrong/restler.git"},"directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.10.x"},"scripts":{"test":"node test/all.js"},"dependencies":{"qs":"0.6.6","xml2js":"0.4.0","yaml":"0.2.3","iconv-lite":"0.2.11"},"devDependencies":{"nodeunit":"0.8.2"},"bugs":{"url":"https://github.com/danwrong/restler/issues"},"_id":"restler@3.1.0","dist":{"shasum":"a19cd23acc8088cdf7c1b057e024227d8d3faf41","tarball":"http://registry.npmjs.org/restler/-/restler-3.1.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"easternbloc","email":"ben@marvell-consulting.com"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"},{"name":"easternbloc","email":"ben@marvell-consulting.com"}]},"3.2.0":{"name":"restler","version":"3.2.0","description":"An HTTP client library for node.js","contributors":[{"name":"Dan Webb","email":"dan@danwebb.net"},{"name":"Ben Marvell","email":"ben@marvell-consulting.com"}],"homepage":"https://github.com/danwrong/restler","repository":{"type":"git","url":"https://github.com/danwrong/restler.git"},"directories":{"lib":"./lib"},"main":"./lib/restler","engines":{"node":">= 0.10.x"},"scripts":{"test":"node test/all.js"},"dependencies":{"qs":"0.6.6","xml2js":"0.4.0","yaml":"0.2.3","iconv-lite":"0.2.11"},"devDependencies":{"nodeunit":"0.8.2"},"bugs":{"url":"https://github.com/danwrong/restler/issues"},"_id":"restler@3.2.0","dist":{"shasum":"3a5139de52592f54ff555c1655bbbdb83d6f038b","tarball":"http://registry.npmjs.org/restler/-/restler-3.2.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"easternbloc","email":"ben@marvell-consulting.com"},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"},{"name":"easternbloc","email":"ben@marvell-consulting.com"}]}},"maintainers":[{"name":"danwrong","email":"dan@danwebb.net"},{"name":"ayoung","email":"andrewdyoung@gmail.com"},{"name":"easternbloc","email":"ben@marvell-consulting.com"}],"time":{"modified":"2014-02-17T14:54:13.402Z","created":"2011-02-03T15:27:47.186Z","0.2.0":"2011-12-08T20:20:50.045Z","0.2.1":"2011-12-08T20:20:50.045Z","0.2.2":"2011-12-08T20:20:50.045Z","0.2.3":"2011-12-13T19:44:04.486Z","0.2.4":"2012-01-06T07:40:16.839Z","0.2.5":"2012-01-17T00:14:39.908Z","2.0.0":"2012-02-22T08:46:11.802Z","2.0.1":"2012-05-02T17:56:33.357Z","3.0.0":"2013-12-10T12:04:09.808Z","3.1.0":"2013-12-12T11:24:01.246Z","3.2.0":"2014-02-17T14:54:13.402Z"},"users":{"fgribreau":true,"igorissen":true,"joliva":true},"repository":{"type":"git","url":"https://github.com/danwrong/restler.git"},"readme":"Restler\n=======\n\n[![NPM](https://nodei.co/npm/restler.png?downloads=true&stars=true)](https://nodei.co/npm/restler/)\n\n(C) Dan Webb (dan@danwebb.net/@danwrong) 2011, Licensed under the MIT-LICENSE\n\nAn HTTP client library for node.js (0.10.x and up).  Hides most of the complexity of creating and using http.Client.\n\nSee [Version History](https://github.com/danwrong/restler/wiki/Version-History) for changes\n\nInstalling\n----------\n\n```\nnpm install restler\n```\n\nRunning the tests\n-----------------\n\n```\nnpm test\n```\n\n\nFeatures\n--------\n\n* Easy interface for common operations via http.request\n* Automatic serialization of post data\n* Automatic serialization of query string data\n* Automatic deserialization of XML, JSON and YAML responses to JavaScript objects\n* Provide your own deserialization functions for other datatypes\n* Automatic following of redirects\n* Send files with multipart requests\n* Transparently handle SSL (just specify https in the URL)\n* Deals with basic auth for you, just provide username and password options\n* Simple service wrapper that allows you to easily put together REST API libraries\n* Transparently handle content-encoded responses (gzip, deflate)\n* Transparently handle different content charsets via [iconv-lite](https://github.com/ashtuchkin/iconv-lite)\n\n\nAPI\n---\n\n### request(url, options)\n\nBasic method to make a request of any type. The function returns a RestRequest object that emits events:\n\n#### events\n\n* `complete: function(result, response)` - emitted when the request has finished whether it was successful or not. Gets passed the response result and the response object as arguments. If some error has occurred, `result` is always instance of `Error`, otherwise it contains response data.\n* `success: function(data, response)` - emitted when the request was successful. Gets passed the response data and the response object as arguments.\n* `fail: function(data, response)` - emitted when the request was successful, but 4xx status code returned. Gets passed the response data and the response object as arguments.\n* `error: function(err, response)` - emitted when some errors have occurred (eg. connection aborted, parse, encoding, decoding failed or some other unhandled errors). Gets passed the `Error` object and the response object (when available) as arguments.\n* `abort: function()` - emitted when `request.abort()` is called.\n* `timeout: function(ms)` - when a request takes more than the timeout option eg: {timeout:5000}, the request will be aborted. error and abort events will not be called, instead timeout will be emitted.\n* `2XX`, `3XX`, `4XX`, `5XX: function(data, response)` - emitted for all requests with response codes in the range (eg. `2XX` emitted for 200, 201, 203).\n* <code><i>actual response code</i>: function(data, response)</code> - emitted for every single response code (eg. 404, 201, etc).\n\n#### members\n\n* `abort([error])` Cancels request. `abort` event is emitted. `request.aborted` is set to `true`. If non-falsy `error` is passed, then `error` will be additionaly emitted (with `error` passed as a param and `error.type` is set to `\"abort\"`). Otherwise only `complete` event will raise.\n* `retry([timeout])` Re-sends request after `timeout` ms. Pending request is aborted.\n* `aborted` Determines if request was aborted.\n\n\n### get(url, options)\n\nCreate a GET request.\n\n### post(url, options)\n\nCreate a POST request.\n\n### put(url, options)\n\nCreate a PUT request.\n\n### del(url, options)\n\nCreate a DELETE request.\n\n### head(url, options)\n\nCreate a HEAD request.\n\n### patch(url, options)\n\nCreate a PATCH request.\n\n### json(url, data, options)\n\nSend json `data` via GET method.\n\n### postJson(url, data, options)\n\nSend json `data` via POST method.\n\n### putJson(url, data, options)\n\nSend json `data` via PUT method.\n\n### Parsers\n\nYou can give any of these to the parsers option to specify how the response data is deserialized.\nIn case of malformed content, parsers emit `error` event. Original data returned by server is stored in `response.raw`.\n\n#### parsers.auto\n\nChecks the content-type and then uses parsers.xml, parsers.json or parsers.yaml.\nIf the content type isn't recognised it just returns the data untouched.\n\n#### parsers.json, parsers.xml, parsers.yaml\n\nAll of these attempt to turn the response into a JavaScript object. In order to use the YAML and XML parsers you must have yaml and/or xml2js installed.\n\n### Options\n\n* `method` Request method, can be get, post, put, delete. Defaults to `\"get\"`.\n* `query` Query string variables as a javascript object, will override the querystring in the URL. Defaults to empty.\n* `data` The data to be added to the body of the request. Can be a string or any object.\nNote that if you want your request body to be JSON with the `Content-Type: application/json`, you need to\n`JSON.stringify` your object first. Otherwise, it will be sent as `application/x-www-form-urlencoded` and encoded accordingly.\nAlso you can use `json()` and `postJson()` methods.\n* `parser` A function that will be called on the returned data. Use any of predefined `restler.parsers`. See parsers section below. Defaults to `restler.parsers.auto`.\n* `encoding` The encoding of the request body. Defaults to `\"utf8\"`.\n* `decoding` The encoding of the response body. For a list of supported values see [Buffers](http://nodejs.org/docs/latest/api/buffers.html#buffers). Additionally accepts `\"buffer\"` - returns response as `Buffer`. Defaults to `\"utf8\"`.\n* `headers` A hash of HTTP headers to be sent. Defaults to `{ 'Accept': '*/*', 'User-Agent': 'Restler for node.js' }`.\n* `username` Basic auth username. Defaults to empty.\n* `password` Basic auth password. Defaults to empty.\n* `multipart` If set the data passed will be formated as `multipart/form-encoded`. See multipart example below. Defaults to `false`.\n* `client` A http.Client instance if you want to reuse or implement some kind of connection pooling. Defaults to empty.\n* `followRedirects` If set will recursively follow redirects. Defaults to `true`.\n* `timeout` If set, will emit the timeout event when the response does not return within the said value (in ms)\n\n\nExample usage\n-------------\n\n```javascript\nvar rest = require('./restler');\n\nrest.get('http://google.com').on('complete', function(result) {\n  if (result instanceof Error) {\n    console.log('Error:', result.message);\n    this.retry(5000); // try again after 5 sec\n  } else {\n    console.log(result);\n  }\n});\n\nrest.get('http://twaud.io/api/v1/users/danwrong.json').on('complete', function(data) {\n  console.log(data[0].message); // auto convert to object\n});\n\nrest.get('http://twaud.io/api/v1/users/danwrong.xml').on('complete', function(data) {\n  console.log(data[0].sounds[0].sound[0].message); // auto convert to object\n});\n\nrest.get('http://someslowdomain.com',{timeout: 10000}).on('timeout' function(ms){\n  console.log('did not return within '+ms+' ms');\n}).on('complete',function(data,response){\n  console.log('did not time out');\n});\n\nrest.post('http://user:pass@service.com/action', {\n  data: { id: 334 },\n}).on('complete', function(data, response) {\n  if (response.statusCode == 201) {\n    // you can get at the raw response like this...\n  }\n});\n\n// multipart request sending a 321567 byte long file using https\nrest.post('https://twaud.io/api/v1/upload.json', {\n  multipart: true,\n  username: 'danwrong',\n  password: 'wouldntyouliketoknow',\n  data: {\n    'sound[message]': 'hello from restler!',\n    'sound[file]': rest.file('doug-e-fresh_the-show.mp3', null, 321567, null, 'audio/mpeg')\n  }\n}).on('complete', function(data) {\n  console.log(data.audio_url);\n});\n\n// create a service constructor for very easy API wrappers a la HTTParty...\nTwitter = rest.service(function(u, p) {\n  this.defaults.username = u;\n  this.defaults.password = p;\n}, {\n  baseURL: 'http://twitter.com'\n}, {\n  update: function(message) {\n    return this.post('/statuses/update.json', { data: { status: message } });\n  }\n});\n\nvar client = new Twitter('danwrong', 'password');\nclient.update('Tweeting using a Restler service thingy').on('complete', function(data) {\n  console.log(data);\n});\n\n// post JSON\nvar jsonData = { id: 334 };\nrest.postJson('http://example.com/action', jsonData).on('complete', function(data, response) {\n  // handle response\n});\n\n// put JSON\nvar jsonData = { id: 334 };\nrest.putJson('http://example.com/action', jsonData).on('complete', function(data, response) {\n  // handle response\n});\n\n```\n\nTODO\n----\n* What do you need? Let me know or fork.\n","readmeFilename":"README.md","_attachments":{},"_etag":"\"AZP0IIUNXGP3X944MQFGAKDZM\""}